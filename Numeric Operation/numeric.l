%{
#include "numeric.h" //contains tuple and symbol table definition
#include "y.tab.h" //will be generated by yacc
#include <stdlib.h>
#include <string.h>
struct symtab *symbol_lookup(char*); //used for finding a symbol if it exists
void tokenize(char*); //each generated token will be added to token string
extern void yyerror(char*); //extern because definition is already in yacc file
extern char *token_string; //original source in yacc file
%}
letter [a-zA-Z]
digit [0-9] 
id {letter}({letter}|{digit})*
num {digit}+|({digit}*\.{digit}+)([eE][-+]?{digit}+)?  
%%
{num} {yylval.number=strdup(yytext); tokenize("NUM"); return NUM;}
{id} {yylval.symp=symbol_lookup(yytext); tokenize("ID"); return ID;}
"+" {yylval.operator=strdup(yytext);tokenize(" + ");return ADD;}
"-" {yylval.operator=strdup(yytext);tokenize(" - ");return SUB;}
"*" {yylval.operator=strdup(yytext);tokenize(" * ");return MUL;}
"/" {yylval.operator=strdup(yytext);tokenize(" / ");return DIV;}
"(" {yylval.parenthesis=strdup(yytext);tokenize(" ( ");return LEFT_P;}
")" {yylval.parenthesis=strdup(yytext);tokenize(" ) ");return RIGHT_P;}
"=" {yylval.operator=strdup(yytext);tokenize(" = ");return ASSIGN;}
"$" exit(0);
[ \t] ;
\n|. return yytext[0];
%%
struct symtab *symbol_lookup(char *symbol){
 struct symtab *sp;
 for(sp=symbol_table;sp< &symbol_table[NSYS];sp++){
  if(sp->name && !strcmp(sp->name,symbol))
    return sp;
  if(!sp->name){
   sp->name=strdup(symbol);
   return sp;
  }
 }
 //if whole table is traced and no symbol is found then print error
 yyerror("Can't find symbol!");
 exit(1); 
}
void tokenize(char *token){
 if(!token_string){ //if token string is empty then directly copy received token into it
  token_string=strdup(token);
 }
 else{
 /* char *temp;
  temp=(char*)malloc((sizeof(char)*(strlen(token)+strlen(token_string)))+1);
  strcpy(temp,token_string);
  strcat(temp,token);
  token_string=strdup(temp);
  free(temp);
*/
 strcat(token_string,token);
 }
}
